(self.webpackChunktech_details=self.webpackChunktech_details||[]).push([[3691],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},20911:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=n(22122),a=n(19756),i=(n(67294),n(3905)),o=["components"],p={hide_title:!0,sidebar_label:"Framework Overview"},c="EDT Framework Overview",s={unversionedId:"research/edt/edt-overview",id:"research/edt/edt-overview",isDocsHomePage:!1,title:"EDT Framework Overview",description:"Installation",source:"@site/docs/research/edt/edt-overview.md",sourceDirName:"research/edt",slug:"/research/edt/edt-overview",permalink:"/tech-details/docs/research/edt/edt-overview",version:"current",lastUpdatedAt:1628955083,formattedLastUpdatedAt:"8/14/2021",frontMatter:{hide_title:!0,sidebar_label:"Framework Overview"},sidebar:"researchSidebar",previous:{title:"System Level Tests",permalink:"/tech-details/docs/research/vio/basalt-tests"},next:{title:"Map Updater",permalink:"/tech-details/docs/research/edt/MapUpdater"}},l=[{value:"Installation",id:"installation",children:[{value:"ROS main function \uff08edt_node_laser_realdrone.cpp\uff09",id:"ros-main-function-\uff08edt_node_laser_realdronecpp\uff09",children:[]},{value:"ROS main function \uff08edt_node_dsstereo.cpp\uff09",id:"ros-main-function-\uff08edt_node_dsstereocpp\uff09",children:[]}]}],d={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"edt-framework-overview"},"EDT Framework Overview"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"ros-main-function-\uff08edt_node_laser_realdronecpp\uff09"},"ROS main function \uff08edt_node_laser_realdrone.cpp\uff09"),(0,i.kt)("h4",{id:"ros-basics"},"ROS basics"),(0,i.kt)("p",null,"subscribe 4 topics: pose, laser scan, depth from ZED, confidence from ZED"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'        scan_sub = nh.subscribe("/scan", 1, &EDTNODE::get_scan, this);\n        o_sub = nh.subscribe("/mavros/position/local", 1, &EDTNODE::get_pose, this);\n        depth_sub = nh.subscribe("/revised_sensor/image",1,&EDTNODE::get_depth, this);\n        subConf = nh.subscribe("zed/confidence/confidence_map", 1, &EDTNODE::get_confi_map, this);\n')),(0,i.kt)("p",null,"publish 1 topic:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'        mapTimer = nh.createTimer(ros::Duration(0.1), &EDTNODE::publishMap, this);\n\n        pub_map = nh.advertise<edt::CostMap> ("cost_map", 1);\n')),(0,i.kt)("p",null,"node param"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'        nh.param<bool>("/edt/simulation", simulation, false);\n        nh.param<int>("/edt/crop", crop, depth_rows);\n        nh.param<float>("/edt/clear_range", clear_range, 10);\n        nh.param<double>("/nndp_cpp/fly_height",FLYHEIGHT,1.0);\n')),(0,i.kt)("h4",{id:"code-structure"},"Code structure"),(0,i.kt)("p",null,"while receive a depth measurement, update the probatility map (call function from stereo.cpp)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"        if (got_depth)\n        {\n            su->makeStereoPt(trans,depth_ptr,confidence_ptr);\n        }\n")),(0,i.kt)("p",null,"Update the cost Map (call function from MapUpdater.cpp)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"        su->updateEDTMap(FLYHEIGHT-0.4, FLYHEIGHT+0.4, center);\n")),(0,i.kt)("p",null,"Publish the distance map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"        pub_map.publish (cost_map_msg);\n")),(0,i.kt)("h3",{id:"ros-main-function-\uff08edt_node_dsstereocpp\uff09"},"ROS main function \uff08edt_node_dsstereo.cpp\uff09"),(0,i.kt)("h4",{id:"difference-with-edt_node_laser_realdronecpp"},"Difference with edt_node_laser_realdrone.cpp"),(0,i.kt)("p",null,"set params instead of hard coding, such as\nthe physical size of a grid in meter, ",(0,i.kt)("inlineCode",{parentName:"p"},"gridSize"),",\nhow many grids in the map, ",(0,i.kt)("inlineCode",{parentName:"p"},"map_x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"map_y"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"map_z"),"\nhow many grids will be updated in each step, ",(0,i.kt)("inlineCode",{parentName:"p"},"update_x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"update_y"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"update_z"),"\nfly height of UAV, ",(0,i.kt)("inlineCode",{parentName:"p"},"FLYHEIGHT"),"\nheight range of the map, ",(0,i.kt)("inlineCode",{parentName:"p"},"HEIGHT_EXPANSION"),"\nwhether there's a confidence map together with depth map, ",(0,i.kt)("inlineCode",{parentName:"p"},"use_confidence"),"\nthe params used in map update, ",(0,i.kt)("inlineCode",{parentName:"p"},"d_min"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"d_max"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"d_thre")))}u.isMDXComponent=!0}}]);