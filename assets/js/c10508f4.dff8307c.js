(self.webpackChunktech_details=self.webpackChunktech_details||[]).push([[2465],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return g}});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),g=a,f=d["".concat(c,".").concat(g)]||d[g]||u[g]||r;return t?i.createElement(f,o(o({ref:n},p),{},{components:t})):i.createElement(f,o({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},35649:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var i=t(22122),a=t(19756),r=(t(67294),t(3905)),o=["components"],l={},c="Installation of Pangolin",s={unversionedId:"research/calibration/Installing_Panglolin",id:"research/calibration/Installing_Panglolin",isDocsHomePage:!1,title:"Installation of Pangolin",description:"Pangolin is a lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input. At its heart is a simple OpenGl viewport manager which can help to modularise 3D visualisation without adding to its complexity, and offers an advanced but intuitive 3D navigation handler. Pangolin also provides a mechanism for manipulating program variables through config files and ui integration, and has a flexible real-time plotter for visualising graphical data.",source:"@site/docs/research/calibration/Installing_Panglolin.md",sourceDirName:"research/calibration",slug:"/research/calibration/Installing_Panglolin",permalink:"/tech-details/docs/research/calibration/Installing_Panglolin",version:"current",lastUpdatedAt:1626243292,formattedLastUpdatedAt:"7/14/2021",frontMatter:{}},p=[{value:"Git repo",id:"git-repo",children:[]},{value:"Installing dependencies",id:"installing-dependencies",children:[]},{value:"Build",id:"build",children:[]}],u={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"installation-of-pangolin"},"Installation of Pangolin"),(0,r.kt)("p",null,"Pangolin is a lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input. At its heart is a simple OpenGl viewport manager which can help to modularise 3D visualisation without adding to its complexity, and offers an advanced but intuitive 3D navigation handler. Pangolin also provides a mechanism for manipulating program variables through config files and ui integration, and has a flexible real-time plotter for visualising graphical data."),(0,r.kt)("p",null,"The ethos of Pangolin is to reduce the boilerplate code that normally gets written to visualise and interact with (typically image and 3D based) systems, without compromising performance. It also enables write-once code for a number of platforms, currently including Windows, Linux, OSX, Android and IOS."),(0,r.kt)("h2",{id:"git-repo"},"Git repo"),(0,r.kt)("p",null,"Find the latest version on ","[Github]"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/stevenlovegrove/Pangolin.git\n")),(0,r.kt)("h2",{id:"installing-dependencies"},"Installing dependencies"),(0,r.kt)("p",null,"C++11\nOpenGL (Desktop / ES / ES2)\n",(0,r.kt)("inlineCode",{parentName:"p"},"sudo apt install libgl1-mesa-dev"),"\nGlew\n",(0,r.kt)("inlineCode",{parentName:"p"},"sudo apt install libglew-dev"),"\nPython3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo apt install libpython2.7-dev\nsudo python -mpip install numpy pyopengl Pillow pybind11\n")),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("p",null,"Pangolin uses the CMake portable pre-build tool. To checkout and build pangolin in the directory 'build', execute the following at a shell (or the equivelent using a GUI):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/stevenlovegrove/Pangolin.git\ncd Pangolin\nmkdir build\ncd build\ncmake ..\ncmake --build .\n\n")),(0,r.kt)("p",null,"@yanfeng"))}d.isMDXComponent=!0}}]);