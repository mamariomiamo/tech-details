(self.webpackChunktech_details=self.webpackChunktech_details||[]).push([[1698],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,f=p["".concat(s,".").concat(u)]||p[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},33797:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),o=["components"],l={hide_title:!0,sidebar_label:"ECL EKF State Reset Logics"},s="ECL EKF State Reset Logics",d={unversionedId:"hardware/px4-firmware/ecl-ekf/px4-ecl-state-reset",id:"hardware/px4-firmware/ecl-ekf/px4-ecl-state-reset",isDocsHomePage:!1,title:"ECL EKF State Reset Logics",description:"Remark: local frame refers static frame, body frame refers to the moving frame attached to the vehicle.",source:"@site/docs/hardware/px4-firmware/ecl-ekf/px4-ecl-state-reset.md",sourceDirName:"hardware/px4-firmware/ecl-ekf",slug:"/hardware/px4-firmware/ecl-ekf/px4-ecl-state-reset",permalink:"/tech-details/docs/hardware/px4-firmware/ecl-ekf/px4-ecl-state-reset",version:"current",lastUpdatedAt:1626243292,formattedLastUpdatedAt:"7/14/2021",frontMatter:{hide_title:!0,sidebar_label:"ECL EKF State Reset Logics"},sidebar:"px4firmwareSidebar",previous:{title:"ECL EKF Yaw Fusion",permalink:"/tech-details/docs/hardware/px4-firmware/ecl-ekf/px4-ecl-yaw-fusion"}},c=[{value:"Possible Resets and Updated Flag",id:"possible-resets-and-updated-flag",children:[{value:"Reference: <code>vehicle_local_position.msg</code>",id:"reference-vehicle_local_positionmsg",children:[]}]}],m={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ecl-ekf-state-reset-logics"},"ECL EKF State Reset Logics"),(0,i.kt)("p",null,"Remark: local frame refers static frame, body frame refers to the moving frame attached to the vehicle."),(0,i.kt)("h2",{id:"possible-resets-and-updated-flag"},"Possible Resets and Updated Flag"),(0,i.kt)("p",null,"The reset logics for modern PX4 ECL EKF resides in ",(0,i.kt)("inlineCode",{parentName:"p"},"ekf_helper.cpp"),". All resets are tracked by ",(0,i.kt)("inlineCode",{parentName:"p"},"_state_reset_status")," struct, stored within uORB ",(0,i.kt)("inlineCode",{parentName:"p"},"vehicle_local_position")," message (",(0,i.kt)("inlineCode",{parentName:"p"},"PublishLocalPosition()"),")."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Reset Logic"),(0,i.kt)("th",{parentName:"tr",align:null},"Updated Flag"),(0,i.kt)("th",{parentName:"tr",align:null},"Delta Frame"),(0,i.kt)("th",{parentName:"tr",align:null},"uORB"),(0,i.kt)("th",{parentName:"tr",align:null},"MAVLink"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"resetHorizontalVelocityTo()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"velNE_change"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"velNE_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"local NED"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta_vxy"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"vxy_reset_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"NIL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"resetVerticalVelocityTo()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"velD_change"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"velD_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"local NED"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta_vz"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"vz_reset_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"NIL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"resetHorizontalPositionTo()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"posNE_change"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"posNE_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"local NED"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta_xy"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"xy_reset_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"NIL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"resetHeight()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"posD_change")," , ",(0,i.kt)("inlineCode",{parentName:"td"},"posD_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"local NED"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta_z"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"z_reset_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"NIL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"resetQuatStateYaw()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"quat_change"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"quat_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"body frame?"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta_heading"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"heading_reset_counter")),(0,i.kt)("td",{parentName:"tr",align:null},"NIL")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct {\n    uint8_t velNE_counter;  ///< number of horizontal position reset events (allow to wrap if count exceeds 255)\n    uint8_t velD_counter;   ///< number of vertical velocity reset events (allow to wrap if count exceeds 255)\n    uint8_t posNE_counter;  ///< number of horizontal position reset events (allow to wrap if count exceeds 255)\n    uint8_t posD_counter;   ///< number of vertical position reset events (allow to wrap if count exceeds 255)\n    uint8_t quat_counter;   ///< number of quaternion reset events (allow to wrap if count exceeds 255)\n    Vector2f velNE_change;  ///< North East velocity change due to last reset (m)\n    float velD_change;  ///< Down velocity change due to last reset (m/sec)\n    Vector2f posNE_change;  ///< North, East position change due to last reset (m)\n    float posD_change;  ///< Down position change due to last reset (m)\n    Quatf quat_change;  ///< quaternion delta due to last reset - multiply pre-reset quaternion by this to get post-reset quaternion\n} _state_reset_status{};    ///< reset event monitoring structure containing velocity, position, height and yaw reset information\n")),(0,i.kt)("p",null,"Suggestion: shall we expose the information to MAVLink for planning algorithms to work with?"),(0,i.kt)("h3",{id:"reference-vehicle_local_positionmsg"},"Reference: ",(0,i.kt)("inlineCode",{parentName:"h3"},"vehicle_local_position.msg")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# Fused local position in NED.\n\nuint64 timestamp            # time since system start (microseconds)\nuint64 timestamp_sample                 # the timestamp of the raw data (microseconds)\n\nbool xy_valid               # true if x and y are valid\nbool z_valid                # true if z is valid\nbool v_xy_valid             # true if vy and vy are valid\nbool v_z_valid              # true if vz is valid\n\n# Position in local NED frame\nfloat32 x               # North position in NED earth-fixed frame, (metres)\nfloat32 y               # East position in NED earth-fixed frame, (metres)\nfloat32 z               # Down position (negative altitude) in NED earth-fixed frame, (metres)\n\n# Position reset delta\nfloat32[2] delta_xy\nuint8 xy_reset_counter\n\nfloat32 delta_z\nuint8 z_reset_counter\n\n# Velocity in NED frame\nfloat32 vx              # North velocity in NED earth-fixed frame, (metres/sec)\nfloat32 vy              # East velocity in NED earth-fixed frame, (metres/sec)\nfloat32 vz              # Down velocity in NED earth-fixed frame, (metres/sec)\nfloat32 z_deriv             # Down position time derivative in NED earth-fixed frame, (metres/sec)\n\n# Velocity reset delta\nfloat32[2] delta_vxy\nuint8 vxy_reset_counter\n\nfloat32 delta_vz\nuint8 vz_reset_counter\n# Acceleration in NED frame\nfloat32 ax        # North velocity derivative in NED earth-fixed frame, (metres/sec^2)\nfloat32 ay        # East velocity derivative in NED earth-fixed frame, (metres/sec^2)\nfloat32 az        # Down velocity derivative in NED earth-fixed frame, (metres/sec^2)\n\nfloat32 heading             # Euler yaw angle transforming the tangent plane relative to NED earth-fixed frame, -PI..+PI,  (radians)\nfloat32 delta_heading\nuint8 heading_reset_counter\n\n# Position of reference point (local NED frame origin) in global (GPS / WGS84) frame\nbool xy_global              # true if position (x, y) has a valid global reference (ref_lat, ref_lon)\nbool z_global               # true if z has a valid global reference (ref_alt)\nuint64 ref_timestamp            # Time when reference position was set since system start, (microseconds)\nfloat64 ref_lat             # Reference point latitude, (degrees)\nfloat64 ref_lon             # Reference point longitude, (degrees)\nfloat32 ref_alt             # Reference altitude AMSL, (metres)\n\n# Distance to surface\nfloat32 dist_bottom         # Distance from from bottom surface to ground, (metres)\nbool dist_bottom_valid          # true if distance to bottom surface is valid\n\nfloat32 eph             # Standard deviation of horizontal position error, (metres)\nfloat32 epv             # Standard deviation of vertical position error, (metres)\nfloat32 evh             # Standard deviation of horizontal velocity error, (metres/sec)\nfloat32 evv             # Standard deviation of horizontal velocity error, (metres/sec)\n\n# estimator specified vehicle limits\nfloat32 vxy_max             # maximum horizontal speed - set to 0 when limiting not required (meters/sec)\nfloat32 vz_max              # maximum vertical speed - set to 0 when limiting not required (meters/sec)\nfloat32 hagl_min            # minimum height above ground level - set to 0 when limiting not required (meters)\nfloat32 hagl_max            # maximum height above ground level - set to 0 when limiting not required (meters)\n\n# TOPICS vehicle_local_position vehicle_local_position_groundtruth\n# TOPICS estimator_local_position\n")))}p.isMDXComponent=!0}}]);