(self.webpackChunktech_details=self.webpackChunktech_details||[]).push([[3455],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return p}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(r),p=i,h=m["".concat(u,".").concat(p)]||m[p]||d[p]||o;return r?n.createElement(h,a(a({ref:t},s),{},{components:r})):n.createElement(h,a({ref:t},s))}));function p(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3244:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var n=r(22122),i=r(19756),o=(r(67294),r(3905)),a=["components"],l={hide_title:!0,sidebar_label:"Work with Submodules"},u="Git Practices",c={unversionedId:"productivity/git/git",id:"productivity/git/git",isDocsHomePage:!1,title:"Git Practices",description:"Git Submodule",source:"@site/docs/productivity/git/git.md",sourceDirName:"productivity/git",slug:"/productivity/git/git",permalink:"/tech-details/docs/productivity/git/git",version:"current",lastUpdatedAt:1628956952,formattedLastUpdatedAt:"8/14/2021",frontMatter:{hide_title:!0,sidebar_label:"Work with Submodules"},sidebar:"gitSidebar"},s=[{value:"Git Submodule",id:"git-submodule",children:[{value:"To make the git push work",id:"to-make-the-git-push-work",children:[]},{value:"Modify the .gitmodules file correctly",id:"modify-the-gitmodules-file-correctly",children:[]},{value:"To convert the existing submodule to the correct branch",id:"to-convert-the-existing-submodule-to-the-correct-branch",children:[]},{value:"To update submodules after checkingout to a different branch (with different versions of submodules)",id:"to-update-submodules-after-checkingout-to-a-different-branch-with-different-versions-of-submodules",children:[]},{value:"Alias",id:"alias",children:[]}]}],d={toc:s};function m(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"git-practices"},"Git Practices"),(0,o.kt)("h2",{id:"git-submodule"},"Git Submodule"),(0,o.kt)("h3",{id:"to-make-the-git-push-work"},"To make the git push work"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git config --global push.default matching"))),(0,o.kt)("h3",{id:"modify-the-gitmodules-file-correctly"},"Modify the .gitmodules file correctly"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"git config -f .gitmodules submodule.edt.branch linear_dt")),(0,o.kt)("h3",{id:"to-convert-the-existing-submodule-to-the-correct-branch"},"To convert the existing submodule to the correct branch"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"if the local branch does no exist yet:",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"git checkout -b linear_dt --track origin/linear_dt")))),(0,o.kt)("li",{parentName:"ul"},"else, the local branch with the same name already exist, do",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"git branch -u origin/linear_dt"))))),(0,o.kt)("h3",{id:"to-update-submodules-after-checkingout-to-a-different-branch-with-different-versions-of-submodules"},"To update submodules after checkingout to a different branch (with different versions of submodules)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout <branch>\ngit reset --hard\ngit submodule foreach --recursive 'git checkout -- . || :'\ngit submodule update --init --recursive\ngit clean -d -f -f -x\ngit submodule foreach --recursive git clean -d -f -f -x\n")),(0,o.kt)("h3",{id:"alias"},"Alias"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"add the following file content to ",(0,o.kt)("inlineCode",{parentName:"p"},"/.git/config"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"add ",(0,o.kt)("inlineCode",{parentName:"p"},"git sm-trackbranch")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'[alias]\n#git sm-trackbranch : places all submodules on their respective branch specified in .gitmodules\n#This works if submodules are configured to track a branch, i.e if .gitmodules looks like :\n#[submodule "my-submodule"]\n#   path = my-submodule\n#   url = git@wherever.you.like/my-submodule.git\n#   branch = my-branch\nsm-trackbranch = "! git submodule foreach --recursive \'branch=\\"$(git config -f $toplevel/.gitmodules submodule.$name.branch)\\"; git checkout $branch\'"\n\n#sm-pullrebase :\n# - pull --rebase on the master repo\n# - sm-trackbranch on every submodule\n# - pull --rebase on each submodule\n#\n# Important note :\n#- have a clean master repo and subrepos before doing this !\n#- this is *not* equivalent to getting the last committed \n#  master repo + its submodules: if some submodules are tracking branches \n#  that have evolved since the last commit in the master repo,\n#  they will be using those more recent commits !\n#\n#  (Note : On the contrary, git submodule update will stick \n#to the last committed SHA1 in the master repo)\n#\nsm-pullrebase = "! git pull --rebase; git submodule update; git sm-trackbranch ; git submodule foreach \'git pull --rebase\' "\n\n# git sm-diff will diff the master repo *and* its submodules\nsm-diff = "! git diff && git submodule foreach \'git diff\' "\n\n#git sm-push will ask to push also submodules\nsm-push = push --recurse-submodules=on-demand\n\n#git alias : list all aliases\nalias = "!git config -l | grep alias | cut -c 7-"\n')))))}m.isMDXComponent=!0}}]);